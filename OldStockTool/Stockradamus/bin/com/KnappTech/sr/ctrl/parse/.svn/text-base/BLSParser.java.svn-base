package com.kt.sr.ctrl.parse;

import java.util.Calendar;
import java.util.Scanner;

import com.kt.model.LiteDate;
import com.kt.sr.model.constants.SourceAgency;
import com.kt.util.ConnectionCreater;
import com.kt.util.DataUtility;
import com.kt.util.DefaultConnectionCreater;
import com.kt.util.Util;

public class BLSParser extends ERParser {
	private static final transient String STARTTEXT = "<PRE STYLE=\"csv-output\">";
	
	@Override
	protected ConnectionCreater getConnectionCreater() {
		return DefaultConnectionCreater.create(createURL());
//		return new ConnectionCreater() {
//
//			@Override
//			public String getMethodString() {
//				return "POST";
//			}
//
//			@Override
//			public String getURLString() {
//				return "http://data.bls.gov/pdq/SurveyOutputServlet";
//			}
//
//			@Override
//			public HttpURLConnection makeConnection() throws IOException {
//				URL url = new URL(getURLString());
//				HttpURLConnection urlc = (HttpURLConnection)url.openConnection();
//			  	urlc.setRequestMethod(getMethodString());
//			  	urlc.setDoOutput(true);
//			  	urlc.setDoInput(true);
//			  	urlc.setUseCaches(false);
//			  	urlc.setAllowUserInteraction(false);
//			  	urlc.setRequestProperty("Content-type", "text/xml; charset=" + "UTF-8");
//			  	urlc.setRequestProperty("data_tool", "surveymost");
//			  	urlc.setRequestProperty("delimiter", "comma");
//			  	urlc.setRequestProperty("from_year", "surveymost");
//			  	urlc.setRequestProperty("data_tool", "surveymost");
//			  	urlc.setRequestProperty("data_tool", "surveymost");
//			  	urlc.setRequestProperty("data_tool", "surveymost");
//			  	urlc.setRequestProperty("data_tool", "surveymost");
//			  	urlc.setRequestProperty("data_tool", "surveymost");
//			  	urlc.setRequestProperty("data_tool", "surveymost");
//			  	return urlc;
//			}
//		};
	}
	
	protected String createURL() {
		String from_year = "";
		if (record.getEndDate()!=null){
			from_year = Integer.toString(record.getEndDate().getYear());
		} else {
			from_year = "1988";
		}
		String to_year = Integer.toString(LiteDate.getOrCreate().getYear());
		String str = "http://data.bls.gov/pdq/SurveyOutputServlet?"+
		"request_option=get_data&"+
		"reformat=true&"+
		"from_results_page=true&"+
		"initial_request=false&"+
		"output_type=default&"+
		"years_option=specific_years&"+
		"from_year="+from_year+"&"+
		"to_year="+to_year+"&"+
		"output_view=data|&"+
		"periods_option=all_periods&"+
		"output_format=text&"+
		"delimiter=comma&"+
		"include_graphs=false&"+
		"data_tool=surveymost&"+
		"series_id="+record.getID()+"&"+
		"original_output_type=default";
		return str;
	}
	
	@Override
	public SourceAgency getSourceAgency() {
		return SourceAgency.BLS;
	}
	
	protected void updateER() throws InterruptedException {
		int startIndex = data.indexOf(STARTTEXT)+STARTTEXT.length();
		int endIndex = DataUtility.getEndIndex(data, "PRE", startIndex);
		data = data.substring(startIndex, endIndex);
		// now the data has been trimmed to the section that I care about.
		startIndex = data.indexOf("Year");
		data = data.substring(startIndex);
		Scanner scanner = new Scanner(data).useDelimiter(",");
		String str = scanner.next(); // skip over the string 'year'
		str = scanner.next();
		int valuesPerYear = 0;
		int startMonth = 0;
		int rate = 1;
		if (str.equals("Annual")) {
			valuesPerYear = 1;
			rate = 12;
		} else if (str.contains("Qtr")) {
			valuesPerYear = 4;
			int i = Integer.parseInt(str.substring(3,4));
			startMonth = (i-1)*3;
			if (startMonth<Calendar.JANUARY || startMonth>Calendar.DECEMBER) {
				System.err.println("invalid month parsed, see BLS Parser.");
			}
			rate = 3;
		} else if (Util.isMonthAbbreviation(str)) {
			valuesPerYear = 12;
			startMonth = Util.getMonthFromAbbreviation(str);
		} else {
			System.err.println("Could not recognize the update frequency type for "+str);
		}
		if (Thread.interrupted()) {
			throw new InterruptedException();
		}
		int tokensPerLine = 1;
		while (!scanner.hasNextInt()) {
			scanner.next();
			tokensPerLine++;
		}
		int presentYear = Calendar.getInstance().get(Calendar.YEAR);
		int workingYear = Integer.parseInt(scanner.next());
		boolean go = true;
		while (scanner.hasNext() && workingYear<=presentYear && go) {
			try {
				for (int tokenNumber = 0;tokenNumber<tokensPerLine;tokenNumber++) {
					str = scanner.next();
					if (!str.contains("&nbsp;") && 
						tokenNumber<valuesPerYear) 
					{ // include it.
						String temp = everythingBeforeWhiteSpace(str);
						if (str.contains("(")) {
							int endInd = str.indexOf("(");
							temp = str.substring(0, endInd);
						} else if (tokenNumber==tokensPerLine-1) {
							temp = str.substring(0, str.length()-4);
						}
						double dbl = Double.MIN_VALUE;
						try {
							dbl = Double.parseDouble(temp);
						} catch (Exception e) {
							System.err.println("could not parse value as double: "+temp);
						}
						byte month = (byte)(startMonth+tokenNumber*rate);
						byte day = 1;
						LiteDate date = LiteDate.getOrCreate(workingYear, month, day);
						record.addOrReplace(date, dbl);
					}
					if (str.contains("<")) {
						go = false;
						break;
					}
					if (go && tokenNumber==tokensPerLine-1) {
						str = str.substring(str.length()-4);
						workingYear = Integer.parseInt(str);
					}
				}
			} catch (Exception e) {
				go = false;
			}
			if (Thread.interrupted()) {
				throw new InterruptedException();
			}
		}
	}
	
	private static String everythingBeforeWhiteSpace(String str) {
		// TODO Auto-generated method stub
		Character ch = 'a';
		int endIndex = -1;
		for (int i = 0;i<str.length();i++) {
			ch = new Character(str.charAt(i));
			if (!Character.isDigit(ch) && 
				ch!='(' && ch!=')' && ch!='.')
			{
				endIndex = i;
				break;
			}
		}
		String temp = str;
		if (endIndex>=0) {
			temp = str.substring(0, endIndex);
		}
		return temp;
	}

	@Override
	protected boolean isConstantURL() {
		return false;
	}
}
